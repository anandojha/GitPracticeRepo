from Bio.PDB.PDBExceptions import PDBConstructionWarning
from Bio.SeqUtils.ProtParam import ProteinAnalysis
from Bio.PDB import PDBParser
import warnings
import shutil
import os

def run_command(command):
    """Run a system command and print it."""
    print(f"Executing: {command}")
    os.system(command)
################################################################################
# Step 0: Download the PDB file, decompress it, and rename it
run_command("wget https://files.rcsb.org/download/2XWJ.pdb1.gz")
run_command("gunzip 2XWJ.pdb1.gz")
run_command("mv 2XWJ.pdb1 2XWJ.pdb")
################################################################################
# Step 1: Copy the PDB file
run_command("cp -r 2XWJ.pdb system_I.pdb")
################################################################################
# Step 2: Process the PDB file with pdb4amber
run_command("pdb4amber -i system_I.pdb -o system_II.pdb --no-conect --reduce")
# Remove temporary and unnecessary files generated during pdb4amber processing
run_command("rm -rf *nonprot* *renum* *sslink* *log*")
################################################################################
# Step 3: Remove water molecules from the PDB file
def remove_hoh(input_file, output_file):
    with open(input_file, 'r') as file:
        lines = file.readlines()

    with open(output_file, 'w') as file:
        for line in lines:
            if "HOH" not in line:
                file.write(line)

remove_hoh('system_II.pdb', 'system_III.pdb')
################################################################################
# Step 4: Extract NAG (N-acetylglucosamine) molecules from the PDB file
def extract_nag_entries(input_pdb_path, output_pdb_path):
    """
    Extracts all NAG (N-acetylglucosamine) entries from a PDB file and writes them to a new file.
    
    Args:
    input_pdb_path (str): Path to the input PDB file.
    output_pdb_path (str): Path to the output PDB file where only NAG entries will be saved.
    """
    try:
        with open(input_pdb_path, 'r') as file:
            lines = file.readlines()
        nag_lines = [line for line in lines if line.startswith('HETATM') and ' NAG ' in line]
        with open(output_pdb_path, 'w') as file:
            file.writelines(nag_lines)
        print(f"NAG entries successfully extracted to {output_pdb_path}")
    except Exception as e:
        print(f"An error occurred: {e}")

extract_nag_entries('system_III.pdb', 'NAG.pdb')
################################################################################
# Step 5: Extract the two instances of NAG
def extract_and_save_nag_molecules(input_pdb_path):
    """
    Extracts NAG entries from a PDB file based on chain IDs and writes them to separate files.
    
    Args:
    input_pdb_path (str): Path to the input PDB file.
    """
    try:
        with open(input_pdb_path, 'r') as file:
            lines = file.readlines()
        # Initialize dictionaries to hold NAG molecules
        nag_molecules = {}
        # Collect lines for each NAG molecule based on chain ID
        for line in lines:
            if line.startswith('HETATM') and ' NAG ' in line:
                chain_id = line[21]  # Chain ID is at column 22 in the PDB format
                if chain_id not in nag_molecules:
                    nag_molecules[chain_id] = []
                nag_molecules[chain_id].append(line)
        # Save each NAG molecule to a separate file
        for index, (chain_id, entries) in enumerate(nag_molecules.items(), start=1):
            output_file_name = f'NAG_{index}.pdb'
            with open(output_file_name, 'w') as file:
                file.writelines(entries)
            print(f"NAG entries from chain {chain_id} saved to {output_file_name}")
    except Exception as e:
        print(f"An error occurred: {e}")

extract_and_save_nag_molecules('NAG.pdb')
################################################################################
# Step 6: Generate the mol2 file for the ligand
run_command("antechamber -i NAG_1.pdb -fi pdb -o NAG.mol2 -fo mol2 -c bcc -s 2")
# Remove temporary files generated by antechamber
run_command("rm -rf ANTECHAMBER_AC.AC ANTECHAMBER_AC.AC0 ANTECHAMBER_AM1BCC.AC ANTECHAMBER_AM1BCC_PRE.AC ANTECHAMBER_BOND_TYPE.AC ANTECHAMBER_BOND_TYPE.AC0 ATOMTYPE.INF sqm.in sqm.out sqm.pdb")
################################################################################
# Step 7: Generate the frcmod file for the ligand using parmchk2
run_command("parmchk2 -i NAG.mol2 -f mol2 -o NAG.frcmod")
################################################################################
# Step 8: Generate the prepi file for the ligand using antechamber
run_command("antechamber -i NAG_1.pdb -fi pdb -o NAG.prepi -fo prepi -c bcc -s 2")
# Remove temporary files generated by antechamber
run_command("rm -rf ANTECHAMBER_AC.AC ANTECHAMBER_AC.AC0 ANTECHAMBER_AM1BCC.AC ANTECHAMBER_AM1BCC_PRE.AC ANTECHAMBER_BOND_TYPE.AC ANTECHAMBER_BOND_TYPE.AC0 ANTECHAMBER_PREP.AC ANTECHAMBER_PREP.AC0 ATOMTYPE.INF NEWPDB.PDB PREP.INF sqm.in sqm.out sqm.pdb")
################################################################################
# Step 9: Parameterize the system using the initial parameterization script
with open('initial_charge.leap', 'w') as f:
    f.write('''
    source leaprc.protein.ff14SB
    source leaprc.water.tip3p
    source leaprc.gaff
    loadAmberParams NAG.frcmod
    loadAmberPrep NAG.prepi
    pdb = loadpdb system_III.pdb
    charge pdb
    quit
    ''')

os.system("tleap -f initial_charge.leap")
################################################################################
# Step 10: Calculate the molecular weight of the protein
def extract_protein_sequence(structure):
    sequence = ''
    three_to_one = {
        'ALA': 'A', 'CYS': 'C', 'ASP': 'D', 'GLU': 'E', 'PHE': 'F', 'GLY': 'G',
        'HIS': 'H', 'HIE': 'H', 'HID': 'H', 'ILE': 'I', 'LYS': 'K', 'LEU': 'L', 
        'MET': 'M', 'ASN': 'N', 'PRO': 'P', 'GLN': 'Q', 'ARG': 'R', 'SER': 'S', 
        'THR': 'T', 'VAL': 'V','TRP': 'W', 'TYR': 'Y', 'CYX': 'C'}
    for model in structure:
        for chain in model:
            for residue in chain:
                if residue.id[0] == ' ':  # Exclude heteroatoms
                    resname = residue.resname
                    if resname in three_to_one:
                        sequence += three_to_one[resname]
                    else:
                        print(f"Warning: Residue {resname} not recognized, skipping...")
    return sequence

def calculate_protein_weight(pdb_filename):
    parser = PDBParser(PERMISSIVE=1)
    with warnings.catch_warnings():
        warnings.simplefilter('ignore', PDBConstructionWarning)
        structure = parser.get_structure('protein', pdb_filename)
    sequence = extract_protein_sequence(structure)
    if not sequence:
        raise ValueError("No valid protein sequence found in the PDB file.")
    # Analyze the protein sequence to calculate its molecular weight
    protein_analysis = ProteinAnalysis(sequence)
    molecular_weight = protein_analysis.molecular_weight()
    return molecular_weight / 1000  # Convert to kDa

weight_kda = calculate_protein_weight('system_III.pdb')
print(f'The molecular weight of the protein is {weight_kda:.2f} kDa')
################################################################################
# Step 11: Parameterize the system with water molecules
with open('input_water.leap', 'w') as f:
    f.write('''
    source leaprc.protein.ff14SB
    source leaprc.gaff
    source leaprc.water.tip3p
    loadAmberParams frcmod.tip3p
    loadAmberParams NAG.frcmod
    loadAmberPrep NAG.prepi
    set default PBRadii mbondi2
    pdb = loadpdb system_III.pdb
    solvatebox pdb TIP3PBOX 8.0
    charge pdb
    saveamberparm pdb system_water.prmtop system_water.inpcrd
    savepdb pdb system_water.pdb
    quit
    ''')

os.system("tleap -f input_water.leap")
################################################################################
# Step 12: Count the number of water molecules in the PDB file
def count_water_molecules(pdb_filename):
    water_molecule_count = 0
    with open(pdb_filename, 'r') as file:
        for line in file:
            if line.startswith("ATOM") and "WAT " in line:
                water_molecule_count += 1
    return water_molecule_count

num_water_molecules = int(count_water_molecules('system_water.pdb')/3)
print(f'The number of water molecules in the PDB file is {num_water_molecules}')

# Information to be obtained from the SLTCAP tool
"""
Go to https://www.phys.ksu.edu/personal/schmit/SLTCAP/SLTCAP.html

Protein mass (kDa): 253.05	
Net charge of solutes (proton charge units): -33
Number of water molecules: 77937	

Na+: 200
Cl-: 167
"""
################################################################################
# Step 13: Parameterize the system with ions
with open('input_TIP3P.leap', 'w') as f:
    f.write('''
    source leaprc.protein.ff14SB
    source leaprc.gaff
    source leaprc.water.tip3p
    loadAmberParams NAG.frcmod
    loadAmberPrep NAG.prepi
    set default PBRadii mbondi2
    loadAmberParams frcmod.tip3p
    pdb = loadpdb system_III.pdb
    solvateOct pdb TIP3PBOX 8.0
    addIons pdb Na+ 200
    addIons pdb Cl- 167
    charge pdb
    saveamberparm pdb system.prmtop system.inpcrd
    saveamberparm pdb system.parm7 system.rst7
    savepdb pdb system.pdb
    quit
    ''')

os.system("tleap -f input_TIP3P.leap")
################################################################################
# Step 14: Check for the final chatge of the solvated system
with open('final_charge.leap', 'w') as f:
    f.write('''
    source leaprc.protein.ff14SB
    source leaprc.gaff
    source leaprc.water.tip3p
    loadAmberParams NAG.frcmod
    loadAmberPrep NAG.prepi
    loadAmberParams frcmod.ionsjc_tip3p
    loadAmberParams frcmod.tip3p
    pdb = loadpdb system.pdb
    charge pdb
    quit
    ''')

os.system("tleap -f final_charge.leap")

# Remove the leap.log file
run_command("rm -rf leap.log")
################################################################################
# Step 15: Organize the output files into directories
# Create the parameterized_files and intermediate_files directories
os.makedirs('parameterized_files', exist_ok=True)
os.makedirs('intermediate_files', exist_ok=True)

# Move parameterized files to parameterized_files directory
parameterized_files = ['system.prmtop', 'system.rst7', 'system.pdb', 'system.inpcrd']
for file in parameterized_files:
    if os.path.exists(file):
        shutil.move(file, 'parameterized_files/')

# Move all other files to intermediate_files directory
intermediate_files = ["2XWJ.pdb","NAG_1.pdb","NAG.prepi","system.parm7","final_charge.leap","NAG_2.pdb","system_water.inpcrd","initial_charge.leap","NAG.frcmod","system_III.pdb","system_water.pdb","input_TIP3P.leap","NAG.mol2","system_II.pdb","system_water.prmtop","input_water.leap","NAG.pdb","system_I.pdb"]
for file in intermediate_files:
    if os.path.exists(file):
        shutil.move(file, 'intermediate_files/')
################################################################################
